/*
 * bank-mizrahi-calculator
 *
 * The API for Bank Mizrahi
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiRequest : IEquatable<ApiRequest>
    { 
        /// <summary>
        /// Gets or Sets FirstValue
        /// </summary>
        [Required]

        [DataMember(Name="firstValue")]
        public int? FirstValue { get; set; }

        /// <summary>
        /// Gets or Sets SecondValue
        /// </summary>
        [Required]

        [DataMember(Name="secondValue")]
        public int? SecondValue { get; set; }

        /// <summary>
        /// Gets or Sets ArithmeticOperation
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ArithmeticOperationEnum
        {
            /// <summary>
            /// Enum Plus for +
            /// </summary>
            [EnumMember(Value = "+")]
            Plus = 0,
            /// <summary>
            /// Enum Minus for -
            /// </summary>
            [EnumMember(Value = "-")]
            Minus = 1,
            /// <summary>
            /// Enum Star for *
            /// </summary>
            [EnumMember(Value = "*")]
            Star = 2,
            /// <summary>
            /// Enum Slash for /
            /// </summary>
            [EnumMember(Value = "/")]
            Slash = 3        }

        /// <summary>
        /// Gets or Sets ArithmeticOperation
        /// </summary>
        [Required]
        //[RegularExpression("/^[*+\\/-]$/")]
        [DataMember(Name="arithmeticOperation")]
        public ArithmeticOperationEnum? ArithmeticOperation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiRequest {\n");
            sb.Append("  FirstValue: ").Append(FirstValue).Append("\n");
            sb.Append("  SecondValue: ").Append(SecondValue).Append("\n");
            sb.Append("  ArithmeticOperation: ").Append(ArithmeticOperation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiRequest)obj);
        }

        /// <summary>
        /// Returns true if ApiRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstValue == other.FirstValue ||
                    FirstValue != null &&
                    FirstValue.Equals(other.FirstValue)
                ) && 
                (
                    SecondValue == other.SecondValue ||
                    SecondValue != null &&
                    SecondValue.Equals(other.SecondValue)
                ) && 
                (
                    ArithmeticOperation == other.ArithmeticOperation ||
                    ArithmeticOperation != null &&
                    ArithmeticOperation.Equals(other.ArithmeticOperation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstValue != null)
                    hashCode = hashCode * 59 + FirstValue.GetHashCode();
                    if (SecondValue != null)
                    hashCode = hashCode * 59 + SecondValue.GetHashCode();
                    if (ArithmeticOperation != null)
                    hashCode = hashCode * 59 + ArithmeticOperation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiRequest left, ApiRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiRequest left, ApiRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
